import { z } from 'zod';
/* eslint-disable n/no-missing-import */
import type { McpServer, RegisteredTool } from '@modelcontextprotocol/sdk/server/mcp.js';
import type { CallToolResult, TextContent, ToolAnnotations } from '@modelcontextprotocol/sdk/types.js';
/* eslint-enable n/no-missing-import */
import { makeSessionUploadRequest, getPageUrl, ReqEx, getAuthHeadersWithToken, parseWikiUrl } from '../common/utils.js';
import fetch from 'node-fetch';
import { tokenManager } from '../common/tokenManager.js';

export function uploadImageTool(server: McpServer): RegisteredTool {
	return server.tool(
		'upload-image',
		'Download an image from a URL and upload it to MediaWiki as a file.',
		{
			server: z.string().url().describe( 'the host URL of target wiki which you want to use for current session, it belike https://{WIKI_ID}.pub.wiki/ (e.g. https://somewhere.pub.wiki/).' ),
			url: z.string().url().describe('Image URL to download, and it will be uploaded to the wiki,if image is generated by AI, please provide source URL'),
			filename: z.string().describe('Target file name on the wiki, e.g., Example.png'),
			comment: z.string().describe('Upload comment').optional()
		},
		{
			title: 'Upload image',
			readOnlyHint: false,
			destructiveHint: true
		} as ToolAnnotations,
		async ({ server,url, filename, comment }, req) => handleUploadImageTool(req,parseWikiUrl(server), url, filename, comment)
	);
}

async function handleUploadImageTool(
	req: ReqEx,
	server: string,
	url: string,
	filename: string,
	comment?: string
): Promise<CallToolResult> {
	let data: any = null;

	try {
		// 下载远程图片
		const resp = await fetch(url);
		if (!resp.ok) {
			throw new Error(`Failed to download image: ${resp.status} ${resp.statusText}`);
		}
		const buffer = await resp.buffer();
		
		const { headers, token } = await getAuthHeadersWithToken(req, server, tokenManager);
		
		// 使用 session API 上传文件
		data = await makeSessionUploadRequest(
			{
				action: 'upload',
				format: 'json',
				filename,
				ignorewarnings: '1',
				comment: comment || 'Uploaded via MCP',
				// file 字段是二进制，需要 makeSessionApiRequest 支持 multipart
				file: {
					value: buffer,
					options: { filename }
				},
				token: token
			},
			server,
			headers
		);
	} catch (error) {
		return {
			content: [
				{ type: 'text', text: `Failed to upload image: ${(error as Error).message}` }
			],
			isError: true
		};
	}

	if (!data) {
		return {
			content: [
				{ type: 'text', text: 'Failed to upload image: No data returned from API' }
			],
			isError: true
		};
	}

	if (data.error) {
		return {
			content: [
				{ type: 'text', text: `Failed to upload image: ${data.error.info}` }
			],
			isError: true
		};
	}

	return {
		content: [
			{
				type: 'text',
				text: `✅ Image uploaded successfully: ${getPageUrl(server, 'File:' + filename)}`
			},
			{
				type: 'text',
				text: [
					'Upload result:',
					`Result: ${data.upload?.result || 'Success'}`,
					`Filename: ${data.upload?.filename || filename}`,
					`Image URL: ${data.upload?.imageinfo?.url || 'N/A'}`,
					`Description URL: ${data.upload?.imageinfo?.descriptionurl || 'N/A'}`
				].join('\n')
			}
		]
	};
}
